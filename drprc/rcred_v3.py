if __name__ == '__main__':
    parser = argparse.ArgumentParser(description= \
                                         '''

        Reduces the photometric images from SEDM Rainbow Camera.
        Requires either a list of images to be reduced, or a directory name where the night photometry is.
        As an option, can run lacosmic to remove cosmic rays.
        By default it invokes astrometry.net before the reduction.

        %run rcred.py -d PHOTDIR 

        Reduced images are stored in directory called "reduced", within the main directory.

        Optionally, it can be used to clean the reduction products generated by this pipeline within PHOTDIR diretory using -c option (clean).

        %run rcred.py -d PHOTDIR -c

        ''', formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-l', '--filelist', type=str, help='File containing the list of fits for the night.',
                        default=None)
    parser.add_argument('-d', '--photdir', type=str, help='Directory containing the science fits for the night.',
                        default=None)
    parser.add_argument('-c', '--clean', action="store_true", help='Clean the reduced images?', default=False)
    parser.add_argument('-o', '--overwrite', action="store_true", help='re-reduce and overwrite the reduced images?',
                        default=False)
    parser.add_argument('-p', '--copy', action="store_false", help='disable the copy the reduced folder to transient',
                        default=True)

    parser.add_argument('--cosmic', action="store_true", default=False, help='Whether cosmic rays should be removed.')

    args = parser.parse_args()

    filelist = args.filelist
    photdir = args.photdir
    cosmic = args.cosmic
    clean = args.clean
    overwrite = args.overwrite
    copy = args.copy

    myfiles = []

    if (not photdir is None and clean):
        for f in glob.glob("Flat*"):
            os.remove(f)
        for f in glob.glob("Bias*"):
            os.remove(f)
        for f in glob.glob("a_*fits"):
            os.remove(f)
        if (os.path.isdir(os.path.join(photdir, "reduced"))):
            shutil.rmtree(os.path.join(photdir, "reduced"))

    if (not filelist is None):
        mydir = os.path.dirname(filelist)
        if (mydir == ""):
            mydir = "."
        os.chdir(mydir)

        photdir = mydir

        myfiles = np.genfromtxt(filelist, dtype=None)
        myfiles = [os.path.abspath(f) for f in myfiles]

    else:

        if (photdir is None):
            timestamp = datetime.datetime.isoformat(datetime.datetime.utcnow())
            timestamp = timestamp.split("T")[0].replace("-", "")
            photdir = os.path.join(_photpath, timestamp)

            s = ("WARNING! You did not specify the directory or the list:",
                 "- A filelist name with the images you want to reduce [-l] OR",
                 "- The name of the directory which you want to reduce [-d].",
                 "",
                 "A default name for the directory will be assumed on today s date: %s" % photdir)

    mydir = os.path.abspath(photdir)
    # Gather all RC fits files in the folder with the keyword IMGTYPE=SCIENCE
    for f in glob.glob(os.path.join(mydir, "rc*fits")):
        try:
            if (fitsutils.has_par(f, "IMGTYPE") and ((fitsutils.get_par(f, "IMGTYPE").upper() == "SCIENCE") or (
                        "ACQ" in fitsutils.get_par(f, "IMGTYPE").upper()))):
                myfiles.append(f)
        except:
            print("problems opening file %s" % f)

    create_masterbias(mydir)
    print("Create masterflat", mydir)
    create_masterflat(mydir)

    if (len(myfiles) == 0):
        print("Found no files to process")
        sys.exit()
    else:
        print("Found %d files to process" % len(myfiles))


        # Reduce them
    reducedfiles = []
    for f in myfiles:
        print(f)
        # make_mask_cross(f)
        if (fitsutils.has_par(f, "IMGTYPE") and (fitsutils.get_par(f, "IMGTYPE").upper() == "SCIENCE" or (
                    "ACQUI" in fitsutils.get_par(f, "IMGTYPE").upper()))):
            try:
                reduced = reduce_image(f, cosmic=cosmic, overwrite=overwrite)
                reducedfiles.extend(reduced)
            except:
                print("Error when reducing image %s" % f)
                pass

    # If copy is requested, then we copy the whole folder or just the missing files to transient.
    try:
        zeropoint.lsq_zeropoint(os.path.join(mydir, "reduced/allstars_zp.log"),
                                os.path.join(mydir, "reduced/zeropoint"))
    except ValueError:
        print("Could not calibrate zeropoint for file %s" % (os.path.join(mydir, "reduced/allstars_zp.log")))

    dayname = os.path.basename(os.path.dirname(os.path.abspath(myfiles[0])))
    reducedname = os.path.join(os.path.dirname(os.path.abspath(myfiles[0])), "reduced")
    if (not photdir is None and copy):
        cmd = "rcp -r %s grbuser@transient.caltech.edu:/scr3/mansi/ptf/p60phot/fremling_pipeline/sedm/reduced/%s" % (
            reducedname, dayname)
        subprocess.call(cmd, shell=True)
    elif (not filelist is None and copy):
        for f in reducedfiles:
            cmd = "rcp %s grbuser@transient.caltech.edu:/scr3/mansi/ptf/p60phot/fremling_pipeline/sedm/reduced/%s/." % (
                f, dayname)
            subprocess.call(cmd, shell=True)
